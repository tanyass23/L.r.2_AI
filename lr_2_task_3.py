# -*- coding: utf-8 -*-
"""LR_2_task_3

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11hh2Xczz1LGyC9PpeSVAPQBnh3Z0CHFH

**КРОК 1: Завантаження та вивчення даних**
"""

from sklearn.datasets import load_iris
iris_dataset = load_iris()
print("Ключі iris_dataset: \n", iris_dataset.keys())
print("\nОпис набору:\n", iris_dataset['DESCR'][:193] + "\n...")
print("Назви класів:", iris_dataset['target_names'])
print("Назва ознак:\n", iris_dataset['feature_names'])
print("Тип масиву data:", type(iris_dataset['data']))
print("Форма масиву data:", iris_dataset['data'].shape)
print("Перші 5 прикладів:\n", iris_dataset['data'][:5])
print("Тип масиву target:", type(iris_dataset['target']))
print("Відповіді:\n", iris_dataset['target'])
iris = load_iris()
X = iris.data
y = iris.target
target_names = iris.target_names

"""**КРОК 2: Завантаження даних через Pandas**



"""

from pandas import read_csv
from pandas.plotting import scatter_matrix
from matplotlib import pyplot

url = "https://raw.githubusercontent.com/jbrownlee/Datasets/master/iris.csv"
names = ['sepal-length', 'sepal-width', 'petal-length', 'petal-width', 'class']
dataset = read_csv(url, names=names)

print("Розмірність:", dataset.shape)
print("Перші 20 рядків:\n", dataset.head(20))
print("Статистика:\n", dataset.describe())

print("Кількість екземплярів кожного класу:\n", dataset.groupby('class').size())

"""**КРОК 3: Візуалізація даних**"""

# Boxplot (діаграми розмаху) - одновимірні графіки
dataset.plot(kind='box', subplots=True, layout=(2,2), sharex=False, sharey=False)
pyplot.suptitle("Діаграми розмаху по кожному атрибуту")
pyplot.show()

# Гістограми
dataset.hist()
pyplot.suptitle("Гістограми ознак")
pyplot.show()

# Багатовимірні графіки
scatter_matrix(dataset)
pyplot.suptitle("Матриця діаграм розсіювання")
pyplot.show()

"""**КРОК 4: Розділення на тренувальні і тестові дані**"""

from sklearn.model_selection import train_test_split

array = dataset.values
X = array[:, 0:4]
Y = array[:, 4]
X_train, X_validation, Y_train, Y_validation = train_test_split(X, Y, test_size=0.20, random_state=1)

print("Форма X_train:", X_train.shape)
print("Форма X_validation:", X_validation.shape)

"""**КРОК 5: Створення і порівняння моделей**"""

from sklearn.model_selection import StratifiedKFold
from sklearn.model_selection import cross_val_score
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.naive_bayes import GaussianNB
from sklearn.svm import SVC

models = []
models.append(('LR', LogisticRegression(solver='liblinear', multi_class='ovr')))
models.append(('LDA', LinearDiscriminantAnalysis()))
models.append(('KNN', KNeighborsClassifier()))
models.append(('CART', DecisionTreeClassifier()))
models.append(('NB', GaussianNB()))
models.append(('SVM', SVC(gamma='auto')))

results = []
names = []
for name, model in models:
    kfold = StratifiedKFold(n_splits=10, shuffle=True, random_state=1)
    cv_results = cross_val_score(model, X_train, Y_train, cv=kfold, scoring='accuracy')
    results.append(cv_results)
    names.append(name)
    print(f"{name}: {cv_results.mean():.4f} ± {cv_results.std():.4f}")

""" **КРОК 6: Побудова фінальної моделі та оцінка на тестовому наборі**"""

model = SVC(gamma='auto')
model.fit(X_train, Y_train)
predictions = model.predict(X_validation)

from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

print("Точність:", accuracy_score(Y_validation, predictions))
print("Матриця змішування:\n", confusion_matrix(Y_validation, predictions))
print("Повний звіт:\n", classification_report(Y_validation, predictions))

"""**КРОК 7: Отримання прогнозу (застосування моделі для передбачення)**"""

import numpy as np
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier

iris = load_iris()
X = iris.data
y = iris.target
target_names = iris.target_names

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = DecisionTreeClassifier()
model.fit(X_train, y_train)

new_sample = np.array([[5.0, 2.9, 1.0, 0.2]])
print("Форма масиву нового зразка:", new_sample.shape)

predicted_class = model.predict(new_sample)

predicted_class_index = int(predicted_class[0])
predicted_class_name = target_names[predicted_class_index]

print("Модель передбачає, що новий зразок належить до сорту:", predicted_class_name)