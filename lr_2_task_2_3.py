# -*- coding: utf-8 -*-
"""LR_2_task_2_3

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rEWyY7rX58uP0HMmMeSndR6kev8-Hxfo

Сигмоїдальне ядро
"""

from sklearn import preprocessing
from sklearn.svm import SVC
from sklearn.multiclass import OneVsOneClassifier
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.metrics import classification_report, accuracy_score
import numpy as np
import matplotlib.pyplot as plt

from google.colab import files
uploaded = files.upload()
input_file = 'adult.data'

X = []
y = []
count_class1 = 0
count_class2 = 0
max_datapoints = 25000

with open(input_file, 'r') as f:
    for line in f.readlines():
        if count_class1 >= max_datapoints and count_class2 >= max_datapoints:
            break
        if '?' in line:
            continue
        data = line.strip().split(', ')
        if data[-1] == '<=50K' and count_class1 < max_datapoints:
            X.append(data[:-1])
            y.append(0)
            count_class1 += 1
        elif data[-1] == '>50K' and count_class2 < max_datapoints:
            X.append(data[:-1])
            y.append(1)
            count_class2 += 1

X = np.array(X)
y = np.array(y)

label_encoders = []
X_encoded = np.empty(X.shape)

for i in range(X.shape[1]):
    if X[0, i].isdigit():
        X_encoded[:, i] = X[:, i]
    else:
        le = preprocessing.LabelEncoder()
        X_encoded[:, i] = le.fit_transform(X[:, i])
        label_encoders.append(le)

X_encoded = X_encoded.astype(int)

X_train, X_test, y_train, y_test = train_test_split(X_encoded, y, test_size=0.2, random_state=5)

classifier = OneVsOneClassifier(SVC(kernel='sigmoid', C=1.0))
classifier.fit(X_train, y_train)

y_pred = classifier.predict(X_test)

print("\nОцінка класифікатора (сигмоїдальне ядро):")
print("Accuracy: {:.2f}%".format(accuracy_score(y_test, y_pred)*100))
f1 = cross_val_score(classifier, X_encoded, y, scoring='f1_weighted', cv=3)
print("F1 score: {:.2f}%".format(f1.mean()*100))
print("\nДокладний звіт:\n")
print(classification_report(y_test, y_pred, target_names=["<=50K", ">50K"]))